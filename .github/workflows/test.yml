name: Test

on:
  push:
    branches:
      - main # Run the workflow when pushing to the main branch
  release:
    types:
      - published  # Run the workflow when a new GitHub release is published

env:
  NuGetDirectory: ${{ github.workspace}}/nuget

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    name : Test
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v3
    
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.*
    
    - name: Test
      id: test
      working-directory : src/Pipeline.Tests
      run: dotnet test /p:Threshold=50 /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput='./TestResults/'

    - uses: actions/upload-artifact@v3
      with:
        name: test-result
        if-no-files-found: error
        retention-days: 1
        path: src/Pipeline.Tests/TestResults/coverage.cobertura.xml

  build-report:
    name : Coverage Report
    needs: [test]
    if: ${{ needs.test.result == 'success' }}
    runs-on: ubuntu-latest
    steps:

      - name: Download Test Result
        uses: actions/download-artifact@v3
        with:
          name: test-result

      - name: Install Tools
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
      
      - name: Generate Report
        run: reportgenerator "-reports:coverage.cobertura.xml" "-targetdir:./CoverageReport" "-reporttypes:HTML;Badges"
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./CoverageReport
    
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

  create_nuget:
    name : Create Nuget
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.*

    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    - name : Pack
      working-directory : src/Pipeline
      run: dotnet pack --configuration Release --output ${{ env.NuGetDirectory }} --include-source --include-symbols -p:PackageVersion=${{ github.event.release.name }}

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v3
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg


  deploy:
    name : Nuget Push
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ test, create_nuget ]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.*

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: dotnet nuget push ${{ env.NuGetDirectory }}/Pipeline.${{ github.event.release.name }}.nupkg --api-key "${{ secrets.NUGET_KEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
